#include <bits/stdc++.h>
#include <vector>
#define big 1e9
using namespace std;
#define ll long long
#define ld long double
const int MAX = 1e6;
int root[MAX];
const int edges = 5;
pair <ll, pair<int, int> > p[MAX];
int parent(int a)
{
    while(root[a] != a)
    {
        root[a] = root[root[a]];
        a = root[a];
    }
    return a;
}

void union_find(int a, int b)
{
    int d = parent(a);
    int e = parent(b);
    root[d] = root[e];
}

ll kruskal()
{
    int a, b;
   ll cost, minCost = 0;
    for(int i = 0 ; i < edges ; ++i)
    {
        a = p[i].second.first;
        b = p[i].second.second;
        cost = p[i].first;
        if(parent(a) != parent(b))
        {
            minCost += cost;
            union_find(a, b);
        }
    }
    return minCost;
}

int main()
{
    ll  minCost;
    for(int i = 0;i < MAX;++i)
    {
        root[i] = i;
    }
    p[0] = make_pair(10, make_pair(0, 1));
    p[1] = make_pair(18, make_pair(1, 2));
    p[2] = make_pair(13, make_pair(2, 3));
    p[3] = make_pair(21, make_pair(0, 2));
    p[4] = make_pair(22, make_pair(1, 3));
    sort(p, p + edges);
    minCost = kruskal();
    cout << "Minimum cost is: "<< minCost << endl;
 
}